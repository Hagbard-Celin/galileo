#ifndef XADBROWSER_H
#define XADBROWSER_H


/****************************************************************************/


/* This file was created automatically by CatComp.
 * Do NOT edit by hand!
 */


#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

#ifdef CATCOMP_ARRAY
#undef CATCOMP_NUMBERS
#undef CATCOMP_STRINGS
#define CATCOMP_NUMBERS
#define CATCOMP_STRINGS
#endif

#ifdef CATCOMP_BLOCK
#undef CATCOMP_STRINGS
#define CATCOMP_STRINGS
#endif


/****************************************************************************/


#ifdef CATCOMP_NUMBERS

#define MSG_TITLE 1000
#define MSG_XADOPEN_DESC 1001
#define MSG_XADEXTRACT_DESC 1002
#define MSG_ERROR 1003
#define MSG_EXTRACTING 1004
#define MSG_OPENING_ARC 1005
#define MSG_DISKARC_EXTRACT 1006
#define MSG_SELECT_DEST 1007
#define MSG_OK 1008
#define MSG_FILES 1009
#define MSG_DISK 1010
#define MSG_RENAME 1011
#define MSG_REPLACE 1012
#define MSG_REPLACE_ALL 1013
#define MSG_SKIP 1014
#define MSG_SKIP_ALL 1015
#define MSG_ABORT 1016
#define MSG_EXISTS_FORM 1017
#define MSG_RENAME_FORM 1018
#define MSG_NO_PATH_ERR 1019
#define MSG_NO_HOOKS_ERR 1020
#define MSG_READING_ARCHIVE 1021
#define MSG_ENTER_PASSWORD 1022
#define MSG_NEEDS_ASYNC_ERR 1023

#endif /* CATCOMP_NUMBERS */


/****************************************************************************/


#ifdef CATCOMP_STRINGS

#define MSG_TITLE_STR "XADbrowser Module"
#define MSG_XADOPEN_DESC_STR "Open XAD Archive"
#define MSG_XADEXTRACT_DESC_STR "Extract XAD Archive"
#define MSG_ERROR_STR "Error"
#define MSG_EXTRACTING_STR "Extracting ..."
#define MSG_OPENING_ARC_STR "Opening archive:"
#define MSG_DISKARC_EXTRACT_STR "Do you want to extract\narchive as files or to disk?"
#define MSG_SELECT_DEST_STR "Select destination"
#define MSG_OK_STR "_OK"
#define MSG_FILES_STR "_Files"
#define MSG_DISK_STR "_Disk"
#define MSG_RENAME_STR "_Rename"
#define MSG_REPLACE_STR "_Replace"
#define MSG_REPLACE_ALL_STR "R_eplace All"
#define MSG_SKIP_STR "_Skip"
#define MSG_SKIP_ALL_STR "S_kip All"
#define MSG_ABORT_STR "_Abort"
#define MSG_EXISTS_FORM_STR "File '%s' exists and would be replaced."
#define MSG_RENAME_FORM_STR "Enter new filename for file\n'%s'"
#define MSG_NO_PATH_ERR_STR "Path doesn't exist!"
#define MSG_NO_HOOKS_ERR_STR "Unable to get Galileo callback hooks !"
#define MSG_READING_ARCHIVE_STR "Reading archive..."
#define MSG_ENTER_PASSWORD_STR "Enter password"
#define MSG_NEEDS_ASYNC_ERR_STR "Run asynchronously needs to be enabled for this command to work."

#endif /* CATCOMP_STRINGS */


/****************************************************************************/


#ifdef CATCOMP_ARRAY

struct CatCompArrayType
{
    LONG   cca_ID;
    STRPTR cca_Str;
};

static const struct CatCompArrayType CatCompArray[] =
{
    {MSG_TITLE,(STRPTR)MSG_TITLE_STR},
    {MSG_XADOPEN_DESC,(STRPTR)MSG_XADOPEN_DESC_STR},
    {MSG_XADEXTRACT_DESC,(STRPTR)MSG_XADEXTRACT_DESC_STR},
    {MSG_ERROR,(STRPTR)MSG_ERROR_STR},
    {MSG_EXTRACTING,(STRPTR)MSG_EXTRACTING_STR},
    {MSG_OPENING_ARC,(STRPTR)MSG_OPENING_ARC_STR},
    {MSG_DISKARC_EXTRACT,(STRPTR)MSG_DISKARC_EXTRACT_STR},
    {MSG_SELECT_DEST,(STRPTR)MSG_SELECT_DEST_STR},
    {MSG_OK,(STRPTR)MSG_OK_STR},
    {MSG_FILES,(STRPTR)MSG_FILES_STR},
    {MSG_DISK,(STRPTR)MSG_DISK_STR},
    {MSG_RENAME,(STRPTR)MSG_RENAME_STR},
    {MSG_REPLACE,(STRPTR)MSG_REPLACE_STR},
    {MSG_REPLACE_ALL,(STRPTR)MSG_REPLACE_ALL_STR},
    {MSG_SKIP,(STRPTR)MSG_SKIP_STR},
    {MSG_SKIP_ALL,(STRPTR)MSG_SKIP_ALL_STR},
    {MSG_ABORT,(STRPTR)MSG_ABORT_STR},
    {MSG_EXISTS_FORM,(STRPTR)MSG_EXISTS_FORM_STR},
    {MSG_RENAME_FORM,(STRPTR)MSG_RENAME_FORM_STR},
    {MSG_NO_PATH_ERR,(STRPTR)MSG_NO_PATH_ERR_STR},
    {MSG_NO_HOOKS_ERR,(STRPTR)MSG_NO_HOOKS_ERR_STR},
    {MSG_READING_ARCHIVE,(STRPTR)MSG_READING_ARCHIVE_STR},
    {MSG_ENTER_PASSWORD,(STRPTR)MSG_ENTER_PASSWORD_STR},
    {MSG_NEEDS_ASYNC_ERR,(STRPTR)MSG_NEEDS_ASYNC_ERR_STR},
};

#endif /* CATCOMP_ARRAY */


/****************************************************************************/


#ifdef CATCOMP_BLOCK

static const char CatCompBlock[] =
{
    "\x00\x00\x03\xE8\x00\x12"
    MSG_TITLE_STR "\x00"
    "\x00\x00\x03\xE9\x00\x12"
    MSG_XADOPEN_DESC_STR "\x00\x00"
    "\x00\x00\x03\xEA\x00\x14"
    MSG_XADEXTRACT_DESC_STR "\x00"
    "\x00\x00\x03\xEB\x00\x06"
    MSG_ERROR_STR "\x00"
    "\x00\x00\x03\xEC\x00\x10"
    MSG_EXTRACTING_STR "\x00\x00"
    "\x00\x00\x03\xED\x00\x12"
    MSG_OPENING_ARC_STR "\x00\x00"
    "\x00\x00\x03\xEE\x00\x34"
    MSG_DISKARC_EXTRACT_STR "\x00"
    "\x00\x00\x03\xEF\x00\x14"
    MSG_SELECT_DEST_STR "\x00\x00"
    "\x00\x00\x03\xF0\x00\x04"
    MSG_OK_STR "\x00"
    "\x00\x00\x03\xF1\x00\x08"
    MSG_FILES_STR "\x00\x00"
    "\x00\x00\x03\xF2\x00\x06"
    MSG_DISK_STR "\x00"
    "\x00\x00\x03\xF3\x00\x08"
    MSG_RENAME_STR "\x00"
    "\x00\x00\x03\xF4\x00\x0A"
    MSG_REPLACE_STR "\x00\x00"
    "\x00\x00\x03\xF5\x00\x0E"
    MSG_REPLACE_ALL_STR "\x00\x00"
    "\x00\x00\x03\xF6\x00\x06"
    MSG_SKIP_STR "\x00"
    "\x00\x00\x03\xF7\x00\x0A"
    MSG_SKIP_ALL_STR "\x00"
    "\x00\x00\x03\xF8\x00\x08"
    MSG_ABORT_STR "\x00\x00"
    "\x00\x00\x03\xF9\x00\x28"
    MSG_EXISTS_FORM_STR "\x00"
    "\x00\x00\x03\xFA\x00\x22"
    MSG_RENAME_FORM_STR "\x00\x00"
    "\x00\x00\x03\xFB\x00\x14"
    MSG_NO_PATH_ERR_STR "\x00"
    "\x00\x00\x03\xFC\x00\x28"
    MSG_NO_HOOKS_ERR_STR "\x00\x00"
    "\x00\x00\x03\xFD\x00\x14"
    MSG_READING_ARCHIVE_STR "\x00\x00"
    "\x00\x00\x03\xFE\x00\x10"
    MSG_ENTER_PASSWORD_STR "\x00\x00"
    "\x00\x00\x03\xFF\x00\x42"
    MSG_NEEDS_ASYNC_ERR_STR "\x00\x00"
};

#endif /* CATCOMP_BLOCK */


/****************************************************************************/


struct LocaleInfo
{
    APTR li_LocaleBase;
    APTR li_Catalog;
};


#ifdef CATCOMP_CODE

struct CatCompBlockType
{
	LONG	ccb_ID;
	UWORD	ccb_StringSize;
};

STRPTR GetString(struct LocaleInfo * li, LONG stringNum)
{
	const struct CatCompBlockType * ccb = (APTR)CatCompBlock;
	const struct CatCompBlockType * ccb_stop = (APTR)&((BYTE *)ccb)[sizeof(CatCompBlock)];

	STRPTR builtin = NULL;
	STRPTR result = NULL;

	while(ccb < ccb_stop && ccb->ccb_StringSize > 0)
	{
		if(ccb->ccb_ID == stringNum)
		{
			builtin = (STRPTR)&ccb[1];
			break;
		}

		ccb = (struct CatCompBlockType *)&((BYTE *)ccb)[sizeof(*ccb) + ccb->ccb_StringSize];
	}

	if(li != NULL && li->li_LocaleBase != NULL)
	{
		struct Library * LocaleBase = li->li_LocaleBase;

		result = GetCatalogStr(li->li_Catalog, stringNum, builtin);
	}
	else
	{
		result = builtin;
	}

	return(result);
}


#endif /* CATCOMP_CODE */


/****************************************************************************/


#endif /* XADBROWSER_H */
